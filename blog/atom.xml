<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feed Name</title>
  <link href="http://domain/"/>
  <link type="application/atom+xml" rel="self" href="http://domain/atom.xml"/>
  <updated>6/11/2013 20:57:03</updated>
  <id>http://domain/</id>
  <author>
    <name>Author</name>
    <email>Email</email>
  </author>

  
  <entry>
    <id>http://domain//blog/bluetooth-keyboard-on-the-raspberry-pi/</id>
    <link type="text/html" rel="alternate" href="http://domain//blog/bluetooth-keyboard-on-the-raspberry-pi/"/>
    <title>Bluetooth Keyboard on the Raspberry Pi</title>
    <updated>18/02/2013 0:00:00</updated>
    <author>
      <name>Author</name>
      <uri>http://domain/</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;/img/blog/raspberry.jpg&quot;&gt;&lt;img style=&quot;background-image: none; float: right; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;&quot; title=&quot;Raspberry Pi&quot; src=&quot;/img/blog/raspberry_thumb.jpg&quot; alt=&quot;Raspberry Pi&quot; align=&quot;right&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;So I joined the hype and got myself a &lt;a href=&quot;http://www.raspberrypi.org/&quot; target=&quot;_blank&quot;&gt;Raspberry Pi&lt;/a&gt;. I loaded it with &lt;a href=&quot;http://www.raspbmc.com/&quot; target=&quot;_blank&quot;&gt;RaspBMC&lt;/a&gt; and now I’ve got a nice little media centre connected to my TV. All my music and pictures already reside on a NAS in the utility closet upstairs. I experimented with using my PS3 as a media center (too noisy and bad codec support) and with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_Living_Network_Alliance&quot; target=&quot;_blank&quot;&gt;DLNA&lt;/a&gt; capable blu-ray player (silent, but clumsy UI and also bad codec support), but nothing really worked that great. With the Raspberry, I now have a great front-end for my media collection. It’s silent (passively cooled) and runs every file I throw at it.&lt;/p&gt;
&lt;p&gt;I planned to do some other stuff with this Raspberry, so I picked up this Bluetooth PS3 keyboard from a bargain bin and a &lt;a href=&quot;http://www.trust.com/products/productsupport.aspx?artnr=17124&quot; target=&quot;_blank&quot;&gt;Bluetooth dongle&lt;/a&gt;. Thinking that Bluetooth is a pretty well known these days, I thought pairing it with the Raspberry would be a piece of pie.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/img/blog/ps3keyboard.jpg&quot;&gt;&lt;img style=&quot;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; margin-right: auto; border: 0px;&quot; title=&quot;Playstation 3 Keyboard&quot; src=&quot;/img/blog/ps3keyboard_thumb.jpg&quot; alt=&quot;Playstation 3 Keyboard&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Boy, was I wrong. I don’t speak Linux and apparently Linux doesn’t really speak Bluetooth that well. Luckily, I speak Google pretty well and after an evening tinkering with obscure command line tools and strange text editors, I managed to get it to work.&lt;/p&gt;
&lt;p&gt;So if anyone out there is struggling to get a Bluetooth Keyboard to work on the Raspberry Pi, here are the instructions to get it to work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://domain//blog/layerless-webforms-4-5-databinding/</id>
    <link type="text/html" rel="alternate" href="http://domain//blog/layerless-webforms-4-5-databinding/"/>
    <title>Layerless: Webforms 4.5 Databinding</title>
    <updated>13/12/2012 0:00:00</updated>
    <author>
      <name>Author</name>
      <uri>http://domain/</uri>
    </author>
    <content type="html">&lt;p&gt;Data binding in Webforms has never been easy. Either you used the &lt;a title=&quot;Msdn article&quot; href=&quot;http://msdn.microsoft.com/en-us/library/system.web.ui.datasourcecontrol.aspx&quot; target=&quot;_blank&quot;&gt;Datasource Controls&lt;/a&gt; and end up with an overcrowded markup; or you bind your data manually in the codebehind and end up with an overcrowded codebehind page. No matter what you chose, ‘magic strings’ will be used and you can forget about testability. Those hipster MVC folks have so much easier. One method on the controller just supplies the view with data. No lifecycle, no magic strings, just clean code.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://domain//blog/linq-all-the-exceptions/</id>
    <link type="text/html" rel="alternate" href="http://domain//blog/linq-all-the-exceptions/"/>
    <title>Linq All The Exceptions</title>
    <updated>4/09/2012 0:00:00</updated>
    <author>
      <name>Author</name>
      <uri>http://domain/</uri>
    </author>
    <content type="html">&lt;p&gt;At work we have this ‘Layered’ application where every layer catches Exceptions and re-throws them in an custom Exception type. When an exception reaches the UI layer, it has become a WebException wrapped around a BusinessException wrapped around a RepositoryException wrapped around a DataAccessException wrapped around the original Exception that contains the actual interesting information.&lt;/p&gt;
&lt;p&gt;This not only renders the log file unreadable, it also makes it hard to throw meaningful exceptions. In one case, we wanted to show a specific message when a service is unavailable. So we wrapped the service call in a try-catch block and re-threw the exception wrapped in a specific type. Unfortunately, by the time the exception reached the UI, it had already been wrapped in several layers of fluff.&lt;/p&gt;
&lt;p&gt;I cracked my knuckles and prepared myself to write another do-while loop to find the meaningful exception. But then I thought: “Wouldn’t linq be nice to have in this case? Then I could write code like this:” &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyMeaningFullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Handle meaningfull exception&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://domain//blog/layerless-how-i-learned-to-stop-worrying-and-love-the-iqueryable/</id>
    <link type="text/html" rel="alternate" href="http://domain//blog/layerless-how-i-learned-to-stop-worrying-and-love-the-iqueryable/"/>
    <title>Layerless: How I Learned to Stop Worrying and Love the IQueryable</title>
    <updated>14/06/2012 0:00:00</updated>
    <author>
      <name>Author</name>
      <uri>http://domain/</uri>
    </author>
    <content type="html">&lt;p&gt;In my &lt;a href=&quot;http://www.correlatedcontent.com/blog/layerless-repositories/&quot;&gt;last post&lt;/a&gt; repositories were made simpler and more descriptive. The central piece in this was the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.linq.iqueryable.aspx&quot; target=&quot;_blank&quot;&gt;IQueryable&lt;/a&gt;. This interface is at the core of every &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb546158.aspx&quot; target=&quot;_blank&quot;&gt;Linq Provider&lt;/a&gt;. A Linq Provider is the machinery that will convert our linq statements in a format that is readable for the underlying datastore (e.g. sql, xpath,...). Using the IQueryable as the core of your data access strategy enables us to do some nifty things. In this post I will examine two of them: Composite Queries and Projections. In a next post I will show how these can be used to improve databinding in Webforms 4.5&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://domain//blog/so-ill-be-doing-this-in-english-now/</id>
    <link type="text/html" rel="alternate" href="http://domain//blog/so-ill-be-doing-this-in-english-now/"/>
    <title>So I’ll be doing this in English now</title>
    <updated>13/06/2012 0:00:00</updated>
    <author>
      <name>Author</name>
      <uri>http://domain/</uri>
    </author>
    <content type="html">&lt;p&gt;Since English is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Lingua_franca&quot; target=&quot;_blank&quot;&gt;Lingua Franca&lt;/a&gt; among programmers, I’ll be blogging in English now. Probably hairy English, but if something I wrote could accidently help a programmer in Botswana, but he or she cannot understand it because it is written in Dutch, then this blog overshoots it’s purpose. Also, my number one reason to start this blog was to teach myself new stuff. So why not practice my English while I’m at it. I’ll be translating the old posts soon.&lt;/p&gt;
</content>
  </entry>
  
</feed>